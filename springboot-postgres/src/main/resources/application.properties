spring.datasource.url=jdbc:postgresql://postgres-db-postgresql.db.svc.cluster.local:5432/mydb?applicationName=springboot-app
spring.datasource.username=myuser
spring.datasource.password=mypass
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

# Actuator exposure & base metrics
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.probes.enabled=true
management.metrics.tags.application=springboot-app

# Enable histograms for HTTP server and custom timers (good for latency SLOs)
management.metrics.distribution.percentiles-histogram.http.server.requests=true
# Global percentiles for timers (Micrometer)
management.metrics.distribution.percentiles.all=0.5,0.9,0.95,0.99

# OTLP (metrics) target (route through agent → gateway). Micrometer OTLP registry uses HTTP.
management.otlp.metrics.export.url=http://otel-agent.monitoring.svc.cluster.local:4318/v1/metrics
management.otlp.metrics.export.step=10s

# Enable Prometheus registry (legacy dashboards still expect Prometheus scrape path)
management.prometheus.metrics.export.enabled=true

# Tracing: disabled for now (agent & Tempo pipeline to be enabled later via env OTEL_TRACES_EXPORTER=otlp)
management.tracing.enabled=false
# management.otlp.tracing.endpoint=http://otel-agent.monitoring.svc.cluster.local:4318/v1/traces

# Service name resource attribute (OTel)
# OTel resource attributes via env (set in deployment): OTEL_RESOURCE_ATTRIBUTES=service.name=springboot-app,service.namespace=app,service.version=0.0.1
# (Here we just document; set via container env for portability.)

# Sampling (100% for POC; reduce to e.g. 0.2 later)
management.tracing.sampling.probability=1.0

# (Optional) reduce noisy Hibernate metrics
management.metrics.enable.hibernate=false

# ---- HikariCP tuning (reduce overall open connections per pod) ----
# Default maxPoolSize=10; with 5 pods это давало ~50 idle соединений.
# Уменьшаем до 6, что даст максимум 30 при 5 подах (обычно меньше, т.к. minIdle ниже).
spring.datasource.hikari.maximum-pool-size=6
spring.datasource.hikari.minimum-idle=2
# Закрывать неиспользуемые соединения быстрее (мс)
spring.datasource.hikari.idle-timeout=300000
# Пересоздавать соединения каждые ~15 минут для профилактики (мс)
spring.datasource.hikari.max-lifetime=900000
# Включить обнаружение потенциальных утечек (лог если удерживается >60s)
spring.datasource.hikari.leak-detection-threshold=60000
