name: workflow_jmeter_ansible

on:
  workflow_dispatch:
    inputs:
      test_file:
        description: 'Имя JMX файла (без пути, можно без .jmx)'
        required: true
        default: 'test_app_load_only.jmx'

jobs:
  run-ansible-jmeter:
    runs-on: [self-hosted, ansible, jmeter]
    timeout-minutes: 40
    env:
      # Use GitHub expression so путь разворачивается корректно, не буквальная строка
      LOGS_DIR: ${{ github.workspace }}/jmeter_logs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug workspace & list tests
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          ls -1 $GITHUB_WORKSPACE/ansible_jmeter/tests || { echo 'tests dir missing'; exit 1; }

      - name: Ensure Ansible
        run: |
          if ! command -v ansible-playbook >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y ansible python3-jmespath
          fi
          ansible --version

      - name: Ensure kubectl
        run: |
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -sLO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          kubectl version --client --output=yaml || true

      - name: Activate minikube docker-env (if available)
        run: |
          if command -v minikube >/dev/null 2>&1; then
            echo "Activating minikube docker-env";
            eval $(minikube docker-env)
            docker info 2>/dev/null | grep -i 'server version' || true
          else
            echo "minikube not found - using default docker context"
          fi

      - name: Run Ansible JMeter playbook
        id: ansible_run
        run: |
          set -e
          TEST_FILE="${{ github.event.inputs.test_file }}"
          if [[ "$TEST_FILE" != *.jmx ]]; then TEST_FILE="${TEST_FILE}.jmx"; fi
          mkdir -p "$LOGS_DIR"
          echo "Using LOGS_DIR=$LOGS_DIR"
          kubectl delete job -n load -l app=jmeter-loadgen --ignore-not-found || true
          ansible-playbook ansible_jmeter/jmeter_play.yml \
            -e jmeter_test_file="$TEST_FILE" \
            -e jmeter_local_logs_dir="$LOGS_DIR" || { echo 'Playbook failed'; exit 1; }
          echo 'After playbook directory tree:'
          find "$LOGS_DIR" -maxdepth 2 -type f -name run.meta -printf 'META %p\n' || true

      - name: Discover run dir from metadata (fallback)
        id: discover
        run: |
          set -e
          if [ ! -d "$LOGS_DIR" ]; then echo 'No logs dir (discover)'; exit 0; fi
          META=$(find "$LOGS_DIR" -maxdepth 2 -type f -name run.meta | head -1 || true)
          if [ -n "$META" ]; then
            RUN_DIR=$(dirname "$META")
            echo "Found run dir via run.meta: $RUN_DIR"
            echo "latest_dir=$RUN_DIR" >> $GITHUB_OUTPUT
          else
            echo 'No run.meta found yet'
          fi

      - name: Locate latest run directory
        id: locate
        run: |
          set -e
          if [ ! -d "$LOGS_DIR" ]; then echo "No logs dir" >&2; exit 1; fi
          echo 'Existing entries:'
          ls -l "$LOGS_DIR" || true
          # Prefer metadata-derived value first
          if [ -n "${{ steps.discover.outputs.latest_dir }}" ]; then
            LATEST='${{ steps.discover.outputs.latest_dir }}'
          else
            LATEST=$(ls -1dt "$LOGS_DIR"/*/ 2>/dev/null | head -1 | sed 's:/*$::')
          fi
          # Fallback to symlink 'latest'
          if [ -z "$LATEST" ] && [ -L "$LOGS_DIR/latest" ]; then
            LATEST=$(readlink -f "$LOGS_DIR/latest")
          fi
          # Fallback to any directory if glob with slash failed
          if [ -z "$LATEST" ]; then
            LATEST=$(find "$LOGS_DIR" -maxdepth 1 -mindepth 1 -type d | sort -r | head -1)
          fi
          echo "Latest run dir: $LATEST"
          echo "latest_dir=$LATEST" >> $GITHUB_OUTPUT
          ls -1 "$LATEST" || true
          
      - name: SLA & summary
        run: |
          LATEST='${{ steps.locate.outputs.latest_dir }}'
          if [ -z "$LATEST" ] || [ ! -d "$LATEST" ]; then echo 'No run dir'; exit 1; fi
          JTL="$LATEST/results.jtl"
          if [ ! -f "$JTL" ]; then echo 'No results.jtl found'; exit 1; fi
          echo '--- LAST 10 LINES ---'
          tail -n 10 "$JTL" || true
          TOTAL=$(grep -c '<sample ' "$JTL" || echo 0)
          ERR=$(grep -c 's="false"' "$JTL" || echo 0)
          PCT=$(awk -v e=$ERR -v t=$TOTAL 'BEGIN{ if(t==0){print 0}else{printf "%.2f", (e/t*100)} }')
          echo "Samples: $TOTAL Errors: $ERR ($PCT%)"
          # SLA check via awk (без зависимости от bc)
          if awk -v p="$PCT" 'BEGIN{exit !(p>5)}'; then
            echo 'SLA FAIL >5% errors' >&2; exit 1;
          else
            echo 'SLA OK';
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-ansible-run
          path: |
            ${{ steps.locate.outputs.latest_dir }}/results.jtl
            ${{ steps.locate.outputs.latest_dir }}/jmeter.log
            ${{ steps.locate.outputs.latest_dir }}

      - name: Finish
        run: echo "Done."
