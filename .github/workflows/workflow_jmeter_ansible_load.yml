name: Load Test - JMeter Ansible
run-name: "JMeter: ${{ github.event.inputs.test_file || 'test_app_load_only.jmx' }}"

on:
  workflow_dispatch:
    inputs:
      test_file:
        description: 'JMX file name (with no path, can be without extension)'
        required: true
        default: 'test_app_load_only.jmx'
      email_to:
        description: 'Emails for report (use comma)'
        required: false
        default: ''

jobs:
  run-ansible-jmeter:
    runs-on: [self-hosted, ansible, jmeter]
    timeout-minutes: 40
    env:
      # Use GitHub expression so путь разворачивается корректно, не буквальная строка
      LOGS_DIR: ${{ github.workspace }}/jmeter_logs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Capture test start time
        id: mark_start
        run: |
          echo "start_ms=$(date +%s%3N)" >> $GITHUB_OUTPUT
          echo "Captured test start time: $(grep start_ms $GITHUB_OUTPUT | cut -d= -f2)"

      - name: Debug workspace & list tests
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          ls -1 $GITHUB_WORKSPACE/ansible_jmeter/tests || { echo 'tests dir missing'; exit 1; }

      - name: Ensure Ansible
        run: |
          if ! command -v ansible-playbook >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y ansible python3-jmespath
          fi
          ansible --version

      - name: Ensure kubectl
        run: |
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -sLO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          kubectl version --client --output=yaml || true

      - name: Activate minikube docker-env (if available)
        run: |
          if command -v minikube >/dev/null 2>&1; then
            echo "Activating minikube docker-env";
            eval $(minikube docker-env)
            docker info 2>/dev/null | grep -i 'server version' || true
          else
            echo "minikube not found - using default docker context"
          fi

      - name: Run Ansible JMeter playbook
        id: ansible_run
        run: |
          set -e
          TEST_FILE="${{ github.event.inputs.test_file }}"
          if [[ "$TEST_FILE" != *.jmx ]]; then TEST_FILE="${TEST_FILE}.jmx"; fi
          mkdir -p "$LOGS_DIR"
          echo "Using LOGS_DIR=$LOGS_DIR"
          kubectl delete job -n load -l app=jmeter-loadgen --ignore-not-found || true
          ansible-playbook ansible_jmeter/jmeter_play.yml \
            -e jmeter_test_file="$TEST_FILE" \
            -e jmeter_local_logs_dir="$LOGS_DIR" || { echo 'Playbook failed'; exit 1; }
          echo 'After playbook directory tree:'
          find "$LOGS_DIR" -maxdepth 2 -type f -name run.meta -printf 'META %p\n' || true

      - name: Discover run dir from metadata (fallback)
        id: discover
        run: |
          set -e
          if [ ! -d "$LOGS_DIR" ]; then echo 'No logs dir (discover)'; exit 0; fi
          META=$(find "$LOGS_DIR" -maxdepth 2 -type f -name run.meta | head -1 || true)
          if [ -n "$META" ]; then
            RUN_DIR=$(dirname "$META")
            echo "Found run dir via run.meta: $RUN_DIR"
            echo "latest_dir=$RUN_DIR" >> $GITHUB_OUTPUT
          else
            echo 'No run.meta found yet'
          fi

      - name: Locate latest run directory
        id: locate
        run: |
          set -e
          if [ ! -d "$LOGS_DIR" ]; then echo "No logs dir" >&2; exit 1; fi
          echo 'Existing entries:'
          ls -l "$LOGS_DIR" || true
          # Prefer metadata-derived value first
          if [ -n "${{ steps.discover.outputs.latest_dir }}" ]; then
            LATEST='${{ steps.discover.outputs.latest_dir }}'
          else
            LATEST=$(ls -1dt "$LOGS_DIR"/*/ 2>/dev/null | head -1 | sed 's:/*$::')
          fi
          # Fallback to symlink 'latest'
          if [ -z "$LATEST" ] && [ -L "$LOGS_DIR/latest" ]; then
            LATEST=$(readlink -f "$LOGS_DIR/latest")
          fi
          # Fallback to any directory if glob with slash failed
          if [ -z "$LATEST" ]; then
            LATEST=$(find "$LOGS_DIR" -maxdepth 1 -mindepth 1 -type d | sort -r | head -1)
          fi
          echo "Latest run dir: $LATEST"
          echo "latest_dir=$LATEST" >> $GITHUB_OUTPUT
          ls -1 "$LATEST" || true

      - name: SLA & summary
        id: sla
        run: |
          set -euo pipefail
          LATEST='${{ steps.locate.outputs.latest_dir }}'
          if [ -z "$LATEST" ] || [ ! -d "$LATEST" ]; then echo 'No run dir'; exit 1; fi
          JTL="$LATEST/results.jtl"
          if [ ! -f "$JTL" ]; then echo 'No results.jtl found'; exit 1; fi
          echo "Using LATEST=$LATEST"
          echo '--- LAST 10 LINES ---'
          tail -n 10 "$JTL" || true

          echo '--- JTL HEADER ---'
          head -1 "$JTL" || true

          # Detect XML vs CSV
          if grep -q '<sample ' "$JTL"; then
            FORMAT=xml
            TOTAL=$(grep -c '<sample ' "$JTL" || echo 0)
            ERR=$(grep -c '<sample [^>]*s="false"' "$JTL" || echo 0)
          else
            FORMAT=csv
            # Strip CR, ignore blank lines. Assume first line header if contains 'success'
            HEADER=$(head -1 "$JTL" | tr -d '\r') || HEADER=""
            if echo "$HEADER" | grep -qi 'success'; then
              # Count data lines (exclude header & blanks)
              TOTAL=$(tail -n +2 "$JTL" | tr -d '\r' | grep -cv '^$' || echo 0)
              ERR=$(tail -n +2 "$JTL" | tr -d '\r' | grep -c ',false,' || echo 0)
            else
              # Fallback: count all non-empty lines
              TOTAL=$(grep -cv '^$' "$JTL" || echo 0)
              ERR=0
            fi
          fi

          # Sanitize numeric (remove anything after first non-digit)
          TOTAL=$(echo "$TOTAL" | sed 's/[^0-9].*$//')
          ERR=$(echo "$ERR" | sed 's/[^0-9].*$//')

          if [ -z "$TOTAL" ] || ! echo "$TOTAL" | grep -Eq '^[0-9]+$'; then TOTAL=0; fi
          if [ -z "$ERR" ]   || ! echo "$ERR"   | grep -Eq '^[0-9]+$'; then ERR=0; fi

          if [ "$TOTAL" -eq 0 ]; then
            PCT="0.00"
          else
            # Use awk for percentage
            PCT=$(awk -v e="$ERR" -v t="$TOTAL" 'BEGIN{ if(t==0){print "0.00"} else {printf "%.2f", (e/t*100)} }') || PCT="0.00"
          fi

          echo "Format: $FORMAT Total=$TOTAL Errors=$ERR Error%=$PCT"
          echo "Samples: $TOTAL Errors: $ERR ($PCT%)"
          # Write step outputs (overwrite to avoid stray lines)
          {
            echo "total=$TOTAL"
            echo "errors=$ERR"
            echo "error_pct=$PCT"
            echo "format=$FORMAT"
          } > "$GITHUB_OUTPUT"

          # Sanitize: keep only valid key=value lines (defensive against stray output)
          TMP_SAN=$(mktemp)
          grep -E '^[A-Za-z0-9_]+=' "$GITHUB_OUTPUT" > "$TMP_SAN" || true
          mv "$TMP_SAN" "$GITHUB_OUTPUT"
          echo '--- GITHUB_OUTPUT CONTENT ---'
          cat "$GITHUB_OUTPUT"

          # SLA: fail if >5% (same reversed awk exit logic)
          if awk -v p="$PCT" 'BEGIN{exit (p>5)?0:1}'; then
            echo 'SLA FAIL >5% errors' >&2
            exit 1
          else
            echo 'SLA OK'
          fi

      - name: Capture test end time
        id: mark_end
        if: ${{ always() }}
        run: |
          echo "end_ms=$(date +%s%3N)" >> $GITHUB_OUTPUT
          echo "Captured test end time: $(grep end_ms $GITHUB_OUTPUT | cut -d= -f2)"

      - name: (Optional) Grafana port-forward
        id: grafana_pf
        if: ${{ always() }}
        env:
          # Allow user to predefine a URL via secret; if set we skip port-forward.
          GRAFANA_URL_PRESET: ${{ secrets.GRAFANA_URL || '' }}
        run: |
          set -euo pipefail
          if [ -n "${GRAFANA_URL_PRESET}" ]; then
            echo "Preset GRAFANA_URL provided -> skip port-forward";
            echo "grafana_url=${GRAFANA_URL_PRESET}" >> $GITHUB_OUTPUT
            exit 0;
          fi
          # Determine namespace & service (defaults)
          NS=${GRAFANA_NAMESPACE:-monitoring}
          SVC=${GRAFANA_SERVICE:-grafana}
          PORT=${GRAFANA_SERVICE_PORT:-3000}
          echo "Attempting kubectl port-forward svc/${SVC} ${PORT} -> 3000 in namespace ${NS}";
          # Start background port-forward
          kubectl port-forward -n "$NS" svc/"$SVC" 3000:"$PORT" >/tmp/grafana_pf.log 2>&1 &
          PF_PID=$!
          echo "Started port-forward PID=$PF_PID"
          echo "pf_pid=$PF_PID" >> $GITHUB_OUTPUT
          # Wait for readiness (max ~15s)
          for i in $(seq 1 30); do
            if curl -sf http://127.0.0.1:3000/api/health >/dev/null 2>&1; then
              echo "Grafana reachable via localhost:3000"; break; fi
            sleep 0.5
          done
          if ! curl -sf http://127.0.0.1:3000/api/health >/dev/null 2>&1; then
            echo " WARNING: Grafana port-forward not reachable (continuing, snapshots may fail)" >&2
          fi
          echo "grafana_url=http://127.0.0.1:3000" >> $GITHUB_OUTPUT
          # Export to subsequent steps via GITHUB_ENV so snapshot step can reference if secret absent
          echo "GRAFANA_URL=http://127.0.0.1:3000" >> $GITHUB_ENV

      - name: Grafana snapshots
        id: grafana_snapshots
        if: ${{ always() }}
        env:
          # Use port-forward URL if preset secret absent
          GRAFANA_URL: ${{ secrets.GRAFANA_URL || steps.grafana_pf.outputs.grafana_url }}
          GRAFANA_API_TOKEN: ${{ secrets.GRAFANA_API_TOKEN }}
          # Format examples (comma separated):
          #   dashboardUID1:1,2,8;dashboardUID2;dashboardUID3:5
          # If panel list omitted -> full dashboard render
          GRAFANA_SPECS: ${{ vars.GRAFANA_SPECS || '' }}
        run: |
          set -euo pipefail
          if [ -z "${GRAFANA_URL:-}" ] || [ -z "${GRAFANA_API_TOKEN:-}" ]; then
            echo "Grafana creds not set -> skip"; exit 0; fi
          START='${{ steps.mark_start.outputs.start_ms }}'
          END='${{ steps.mark_end.outputs.end_ms }}'
          if [ -z "$START" ]; then echo "Missing start time"; exit 0; fi
          if [ -z "$END" ]; then echo "Missing end time (maybe earlier failure) -> use now"; END=$(date +%s%3N); fi
          if [ -z "${GRAFANA_SPECS}" ]; then echo "No GRAFANA_SPECS provided -> skip"; exit 0; fi
          OUT_DIR="grafana_snapshots"
          mkdir -p "$OUT_DIR"
          authHeader="Authorization: Bearer ${GRAFANA_API_TOKEN}"
          IFS=';' read -ra DASH <<< "$GRAFANA_SPECS"
          for spec in "${DASH[@]}"; do
            spec=$(echo "$spec" | xargs)
            [ -z "$spec" ] && continue
            uid=${spec%%:*}
            panels_part=""
            if [[ "$spec" == *:* ]]; then
              panels_part=${spec#*:}
            fi
            echo "Processing dashboard $uid"
            # Get slug
            DASH_JSON=$(curl -sf -H "$authHeader" "$GRAFANA_URL/api/dashboards/uid/$uid" || true)
            if [ -z "$DASH_JSON" ]; then echo "Failed to fetch dashboard $uid"; continue; fi
            slug=$(echo "$DASH_JSON" | python3 -c 'import sys,json; d=json.load(sys.stdin);print(d.get("meta",{}).get("slug","dashboard"))')
            if [ -z "$panels_part" ]; then
              # Full dashboard render
              file="$OUT_DIR/${uid}_full.png"
              url="$GRAFANA_URL/render/d/$uid/$slug?from=$START&to=$END&width=1600&height=900&tz=UTC"
              echo "Downloading full dashboard -> $file"
              curl -sf -H "$authHeader" -o "$file" "$url" || { echo "Failed dashboard $uid"; rm -f "$file"; }
            else
              IFS=',' read -ra PANELS <<< "$panels_part"
              for pid in "${PANELS[@]}"; do
                pid=$(echo "$pid" | xargs)
                [ -z "$pid" ] && continue
                file="$OUT_DIR/${uid}_panel_${pid}.png"
                url="$GRAFANA_URL/render/d-solo/$uid/$slug?panelId=$pid&from=$START&to=$END&width=1600&height=500&tz=UTC"
                echo "Downloading panel $pid -> $file"
                curl -sf -H "$authHeader" -o "$file" "$url" || { echo "Failed panel $pid of $uid"; rm -f "$file"; }
              done
            fi
          done
          echo "Snapshot files:"; ls -1 "$OUT_DIR" || echo "(none)"

      - name: Cleanup port-forward
        if: ${{ always() && steps.grafana_pf.outputs.pf_pid != '' }}
        run: |
          set -euo pipefail
          PID='${{ steps.grafana_pf.outputs.pf_pid }}'
          if [ -n "$PID" ] && ps -p "$PID" >/dev/null 2>&1; then
            echo "Killing port-forward PID $PID";
            kill "$PID" || true
          else
            echo "No active port-forward PID to kill"
          fi

      - name: Email report (SendGrid API)
        if: ${{ always() && github.event.inputs.email_to != '' }}
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SENDGRID_FROM: ${{ secrets.SENDGRID_FROM || secrets.SMTP_FROM || 'loadtest-bot@example.com' }}
        run: |
          set -euo pipefail
          # 1. Guard API key
          if [ -z "${SENDGRID_API_KEY:-}" ]; then
            echo 'SENDGRID_API_KEY empty -> skip email'
            exit 0
          fi

          # 2. Locate run dir
          LATEST='${{ steps.locate.outputs.latest_dir }}'
          if [ -z "$LATEST" ] || [ ! -d "$LATEST" ]; then
            echo "No latest run dir -> skip"
            exit 0
          fi

          # 3. Normalize recipients
          RAW='${{ github.event.inputs.email_to }}'
          NORMALIZED=$(echo "$RAW" | tr '\n' ',' | tr ' ' ',' | sed 's/,,*/,/g; s/^,//; s/,$//')
          if [ -z "$NORMALIZED" ]; then
            echo "No recipients after normalization"
            exit 0
          fi

          export NORMALIZED LATEST
          export JOB_STATUS='${{ job.status }}'
          export SAMPLES='${{ steps.sla.outputs.total }}'
          export ERRORS='${{ steps.sla.outputs.errors }}'
          export ERROR_PCT='${{ steps.sla.outputs.error_pct }}'
          export FORMAT='${{ steps.sla.outputs.format }}'

          echo "Building payload.json (no attachments)"

          python3 - <<'PY'
          import os, json, sys

          recips = [r.strip() for r in os.environ['NORMALIZED'].split(',') if r.strip()]
          if not recips:
              print("No valid recipients")
              sys.exit(0)

          latest = os.environ['LATEST']
          repo   = os.environ.get('GITHUB_REPOSITORY','')
          workflow = os.environ.get('GITHUB_WORKFLOW','')
          run_number = os.environ.get('GITHUB_RUN_NUMBER','')
          run_id  = os.environ.get('GITHUB_RUN_ID','')
          server  = os.environ.get('GITHUB_SERVER_URL','https://github.com')
          status  = os.environ.get('JOB_STATUS','unknown')
          samples = os.environ.get('SAMPLES','0')
          errors  = os.environ.get('ERRORS','0')
          error_pct = os.environ.get('ERROR_PCT','0')
          fmt = os.environ.get('FORMAT','csv')
          from_email = os.environ.get('SENDGRID_FROM','loadtest-bot@example.com')

          body = (
              f"Repository: {repo}\n"
              f"Workflow: {workflow}\n"
              f"Run: #{run_number}\n"
              f"Run URL: {server}/{repo}/actions/runs/{run_id}\n\n"
              f"Status: {status}\n"
              f"Samples: {samples}\n"
              f"Errors: {errors}\n"
              f"Error %: {error_pct}\n"
              f"Format: {fmt}\n\n"
              "(Automated email)"
          )

          payload = {
              "personalizations": [{
                  "to": [{"email": r} for r in recips]
              }],
              "from": {"email": from_email},
              "subject": f"JMeter Load Test {status} | {repo} #{run_number}",
              "content": [{
                  "type": "text/plain",
                  "value": body
              }]
          }

          with open("payload.json", "w") as f:
              json.dump(payload, f)

          print("Payload size (bytes):", os.path.getsize("payload.json"))
          # No attachments included by design
          PY

          # 4. Send
          HTTP_CODE=$(curl -s -o resp.txt -w '%{http_code}' \
            -X POST https://api.sendgrid.com/v3/mail/send \
            -H "Authorization: Bearer ${SENDGRID_API_KEY}" \
            -H 'Content-Type: application/json' \
            --data-binary @payload.json) || { echo 'curl failed'; exit 1; }

          echo "HTTP code: $HTTP_CODE"
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo 'Email sent.'
          else
            echo 'Email failed (first 2KB of response):' >&2
            head -c 2048 resp.txt >&2 || true
            echo >&2
            exit 1
          fi

          rm -f resp.txt payload.json || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-ansible-run
          path: |
            ${{ steps.locate.outputs.latest_dir }}/results.jtl
            ${{ steps.locate.outputs.latest_dir }}/jmeter.log
            ${{ steps.locate.outputs.latest_dir }}
            grafana_snapshots

      - name: Finish
        run: echo "Done."
