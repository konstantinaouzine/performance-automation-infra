receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'node-exporter'
          scrape_interval: 30s
          static_configs:
            - targets: ['node-exporter.monitoring.svc.cluster.local:9100']
        - job_name: 'kube-state-metrics'
          scrape_interval: 30s
          static_configs:
            - targets: ['kube-state-metrics-custom.monitoring.svc.cluster.local:8082']
        - job_name: 'cadvisor'
          scrape_interval: 30s
          static_configs:
            - targets: ['cadvisor.monitoring.svc.cluster.local:8081']
        - job_name: 'postgres-exporter'
          scrape_interval: 30s
          static_configs:
            - targets: ['postgres-exporter-prometheus-postgres-exporter.monitoring.svc.cluster.local:9187']
        - job_name: 'jmeter'
          scrape_interval: 15s
          static_configs:
            - targets: ['jmeter-loadgen.load.svc.cluster.local:9270']
        - job_name: 'springboot-app'
          scrape_interval: 15s
          metrics_path: /actuator/prometheus
          scheme: http
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names: ['app']
          relabel_configs:
            # Keep only pods with label app=springboot-app
            - source_labels: [__meta_kubernetes_pod_label_app]
              action: keep
              regex: springboot-app
            # Normalize job label (remove namespace prefix that appears in Mimir as app/springboot-app)
            - target_label: job
              replacement: springboot-app
              action: replace
            # Map pod label app -> application for our PromQL
            - source_labels: [__meta_kubernetes_pod_label_app]
              target_label: application
              action: replace
            # Namespace label (optional but useful)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
              action: replace
          metric_relabel_configs:
            # Drop self-scrape actuator requests to reduce noise
            - source_labels: [uri]
              regex: /actuator/prometheus
              action: drop
            # Drop OpenTelemetry scope labels (not needed for dashboards)
            - regex: otel_scope_name|otel_scope_version|otel_scope_schema_url
              action: labeldrop
            # Drop duplicate exported_application label (we retain application)
            - regex: exported_application
              action: labeldrop
  hostmetrics:
    collection_interval: 60s
    scrapers:
      cpu: {}
      memory: {}
      disk: {}
      filesystem: {}
      load: {}
      network: {}
      paging: {}
      processes: {}
  otlp:
    protocols:
      grpc: {}
      http: {}
processors:
  batch: {}
  resource:
    attributes:
      # Keep service.name only if missing to avoid overwriting existing scrape labels
      - key: service.name
        action: insert
        value: springboot-app
exporters:
  prometheus:
    endpoint: "0.0.0.0:9999"
    metric_expiration: 5m
  otlp:
    endpoint: "otel-collector-gateway-opentelemetry-collector.monitoring.svc.cluster.local:4317"
    tls:
      insecure: true
  debug: {}
service:
  telemetry:
    logs:
      level: "debug"
  pipelines:
    metrics:
      receivers: [prometheus, hostmetrics, otlp]
      processors: [resource, batch]
      exporters: [prometheus, otlp, debug]
